---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create demo Custom Widget Lambda function. Change the stack name to set the name of the Lambda function. Once your stack is created, go to the CloudWatch Console Add widget modal to continue with your custom widget creation.

Parameters:
  DoCreateExampleDashboard:
    Description: Do you want an example dashboard created that shows how the custom widget works?
    Type: String
    AllowedValues: [ 'Yes', 'No']
    Default: 'No'
  SNSEmailAddrss:
    Description: Enter the sns receiver email address.
    Type: String
    AllowedPattern: ^[^@\s]+@[^@\s]+\.[^@\s]+$
  EventBridgeCron:
    Description: The scheduling expression. For example, \"cron(0 20 * * ? *)\", \"rate(5 minutes)\".
    Type: String    

Conditions:
  CreateExampleDashboard: !Equals ["Yes", !Ref DoCreateExampleDashboard]

Resources:
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          // CloudWatch Custom Widget sample: display results of Athena queries
          const aws = require('aws-sdk')

          const DOCS = `
          ## Run Athena Query
          Runs an Athena query and displays results in a table.

          ### Widget parameters
          Param | Description
          ---|---
          **region** | The region to run the Athena query in
          **database** | Name of the Athena database
          **sql** | The SQL query to run

          ### Example parameters
          \`\`\` yaml
          region: ${process.env.AWS_REGION}
          database: default
          sql: SELECT * FROM cloudfront_logs Limit 10
          \`\`\`
          `;

          const sqlJson = require('./sql.json');
          const CHECK_QUERY_STATUS_DELAY_MS = 250;
          const CSS = '<style>td { white-space: nowrap; }</style>'

          const executeQuery = async (athena, accountId, region, querySQL, database)  => {
              const params = {
                  QueryString: querySQL,
                  ResultConfiguration: {
                      OutputLocation: `s3://aws-cw-widget-athena-query-results-${accountId}-${region}`
                  },
                  QueryExecutionContext: {
                      Database: database
                  }
              };
            
              const query = await athena.startQueryExecution(params).promise();
            
              // Wait until query is finished execution.
              await checkQueryStatus(athena, query);
              return await athena.getQueryResults({ QueryExecutionId: query.QueryExecutionId }).promise();
          }

          const checkQueryStatus = async (athena, query) => {
              let finished = false;
              while (!finished) {
                  await sleep(CHECK_QUERY_STATUS_DELAY_MS);
              
                  const response = await athena.getQueryExecution(query).promise();
                  const queryStatus = response.QueryExecution.Status.State;
                  switch (queryStatus) {
                      case 'SUCCEEDED':
                          finished = true;
                      case 'RUNNING':
                      case 'QUEUED':
                          continue;
                      default:
                          console.error('Query Error: ', response);
                          throw new Error(`Status of Query ${query.QueryExecutionId} is ${queryStatus}.`);
                  }
              }
          }

          const sleep = async (delay) => {
              return new Promise((resolve) => setTimeout(resolve, delay));
          }

          const displayResults = async (database, sql, results, region, context) => {
              let html = `
                  <form><table>
                      <tr>
                          <td>Database</td><td><input name="database" value="${database}"></td>
                      </tr><tr>
                          <td valign=top>SQL</td><td><textarea name="sql" rows="2" cols="80">${sql}</textarea></td>
                      </tr>
                  </table></form>
                  <a class="btn btn-primary">Run query</a>
                  <cwdb-action action="call" endpoint="${context.invokedFunctionArn}">{ "region": "${region}" }</cwdb-action>
                  <p>
                  <h2>Results</h2>
              `;

              if (results && results.ResultSet && results.ResultSet.ResultSetMetadata) {
                  const cols = results.ResultSet.ResultSetMetadata.ColumnInfo;
                  const rows = results.ResultSet.Rows.slice(1);
                  
                  html += `
                      <table><thead><tr><th>${cols.map(col => col.Label).join('</th><th>')}</th></tr></thead><tbody>`;
            
                  rows.forEach(row => {
                      html += `<tr><td>${row.Data.map(cell => cell.VarCharValue || '').join('</td><td>')}</td></tr>`;
                  });
            
                  html += `</tbody></table>`
              } else if (results) {
                  html += `<pre>${results}</pre>`;
              }
              
              return html;
          };

          const getColsAndVals = async (results) => {
              
              let cols_txt = '';
              let rows_txt = ''
              if (results && results.ResultSet && results.ResultSet.ResultSetMetadata) {
                  const cols = results.ResultSet.ResultSetMetadata.ColumnInfo;
                  const rows = results.ResultSet.Rows.slice(1);
                  cols_txt += cols.map(col => col.Label).join('|');
                  rows.forEach(row => {
                      rows_txt += row.Data.map(cell => cell.VarCharValue || '').join('|>');
                  });
              }
              
              return [cols_txt, rows_txt];
          }

          const putResultToDashboard = async (dashboardName, results, region, sql, database) => {

              const colsAndVals = await getColsAndVals(results);
              
              let DOCS_TEXT = `
              ## MetaData 
              
              ### Region ${region}
              ### SQL ${sql}
              ### Database ${database}
              
              ## Results
              COL | VAL
              ---|---
              **${colsAndVals[0]}** | ${colsAndVals[1]}
              `;
              
              let final_dashboard_body = {'widgets': []};
              let widget_template = {
                   "type":"text",
                   "x":0,
                   "y":7,
                   "width":10,
                   "height":5,
                   "properties":{
                      "markdown": DOCS_TEXT
                   }
                }
              final_dashboard_body.widgets[0] = widget_template;
              
              const cw = new aws.CloudWatch({region});
              const params = {
                DashboardBody: JSON.stringify(final_dashboard_body), /* required */
                DashboardName: dashboardName /* required */
              };
              cw.putDashboard(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else     console.log(data);           // successful response
              });
              
          }

          const sendMessageToSNS = async (snsArn, subject, results, region, sql, database) => {
              const colsAndVals = await getColsAndVals(results);
              if (parseInt(colsAndVals[1]) <= 10)
                  return;

              let DOCS_TEXT = `
              ## MetaData 
              
              ### Region ${region}
              ### SQL ${sql}
              ### Database ${database}
              
              ## Results
              COL | VAL
              ---|---
              **${colsAndVals[0]}** | ${colsAndVals[1]}
              `;
              
              let now = new Date().toString();
              let email = `${DOCS_TEXT} \n \n This was sent: ${now}`;
              
              var sns = new aws.SNS({region});
              let params = {
                  Message: email,
                  Subject: subject,
                  TopicArn: snsArn
              };
              
              //console.log(JSON.stringify(params))

              sns.publish(params, function(err, data) {
                  if (err) console.log(err, err.stack); 
                  else console.log(data);
              });
          }

          exports.handler = async (event, context) => {
              if (event.describe) {
                  return DOCS;   
              }
              
              const region = event.region || process.env.AWS_REGION;
              const accountId = context.invokedFunctionArn.split(":")[4];
              const athena = new aws.Athena({ region });
              const widget = event.hasOwnProperty('widgetContext');
              // console.log(widget)
              if (widget)
              {
                  const form = event.widgetContext.forms.all;
                  const database = form.database || event.database || 'default';
                  const sql = form.sql || event.sql;
                  let results;

                  if (database && sql && sql.trim() !== '') {
                      try {
                          results = await executeQuery(athena, accountId, region, sql, database);
                      } catch (e) {
                          results = e;
                      }
                  }
                  
                  return CSS + await displayResults(database, sql, results, region, context);
              }
              else
              {
                  const database = sqlJson.database || 'default';
                  const sqls = sqlJson.sqls;
                  for (const item of sqls) {
                      const sql = item.statement;
                      let results;
                      if (database && sql && sql.trim() !== '') {
                          try {
                              results = await executeQuery(athena, accountId, region, sql, database);
                          } catch (e) {
                              results = e;
                          }
                      }
                      await putResultToDashboard(sqlJson.dashboardName, results, region, sql, database);
                      await sendMessageToSNS(sqlJson.snsArn, sqlJson.snsEmailSubject, results, region, sql, database)
                  }
              }

              return "200"
          };
          
      Description: "CloudWatch Custom Widget sample: display results of Athena queries"
      FunctionName: !Sub ${AWS::StackName}
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      Tags:
        - Key: cw-custom-widget
          Value: describe:readWrite

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - s3:GetObject
                - s3:PutObject
                - s3:AbortMultipartUpload
                - s3:ListMultipartUploadParts
                - s3:DeleteObject
                Resource:
                - !Sub arn:aws:s3:::aws-cw-widget-athena-query-results-${AWS::AccountId}-${AWS::Region}/*
              - Effect: Allow
                Action:
                - s3:GetBucketLocation
                - s3:CreateBucket
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:DeleteObject
                Resource:
                - !Sub arn:aws:s3:::aws-cw-widget-athena-query-results-${AWS::AccountId}-${AWS::Region}
              - Effect: Allow
                Action:
                - athena:*
                Resource:
                - "*"
              - Effect: Allow
                Action:
                - s3:Get*
                - s3:List*
                Resource:
                - "*"
              - Effect: Allow
                Action:
                - glue:CreateDatabase
                - glue:DeleteDatabase
                - glue:GetDatabase
                - glue:GetDatabases
                - glue:UpdateDatabase
                - glue:CreateTable
                - glue:DeleteTable
                - glue:BatchDeleteTable
                - glue:UpdateTable
                - glue:GetTable
                - glue:GetTables
                - glue:BatchCreatePartition
                - glue:CreatePartition
                - glue:DeletePartition
                - glue:BatchDeletePartition
                - glue:UpdatePartition
                - glue:GetPartition
                - glue:GetPartitions
                - glue:BatchGetPartition
                Resource:
                - "*"
          PolicyName: athenaAccess

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: 7

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref SNSEmailAddrss
        Protocol: email

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "The scheduling expression. For example, \"cron(0 20 * * ? *)\", \"rate(5 minutes)\". "
      ScheduleExpression: !Ref EventBridgeCron
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "lambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "lambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  demoDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateExampleDashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-${AWS::Region}
      DashboardBody:
        !Sub
          >
          {
              "widgets": [
                  {
                      "type": "custom",
                      "width": 24,
                      "height": 18,
                      "properties": {
                          "endpoint": "${lambdaFunction.Arn}",
                          "params": {
                              "region": "${AWS::Region}",
                              "database": "default",
                              "sql": "select count (uri) FROM cloudfront_logs WHERE status = 200 or status = 304"
                          },
                          "updateOn": {
                              "refresh": true
                          },
                          "title": "Athena Query, ${AWS::Region}"
                      }
                  }
              ]
          }
